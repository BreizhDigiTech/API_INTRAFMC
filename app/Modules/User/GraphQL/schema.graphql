extend type Query {
    # Liste des utilisateurs (accessible uniquement par les administrateurs)
    users(first: Int, page: Int): [User!]!
        @guard(with: ["api"])
        @paginate(defaultCount: 15, maxCount: 50, model: "App\\Models\\User")

    # Récupère un utilisateur spécifique
    user(id: ID!): User
        @guard(with: ["api"])
        @field(resolver: "App\\Modules\\User\\GraphQL\\Queries\\UserQuery@user")
}

extend type Mutation {
    # Mise à jour des informations utilisateur (par un administrateur)
    updateUser(
        id: ID!,
        name: String,
        email: String,
        is_active: Boolean,
        is_admin: Boolean,
        password: String,
        password_confirmation: String
    ): User
        @guard(with: ["api"])
        @field(resolver: "App\\Modules\\User\\GraphQL\\Mutations\\UserMutator@updateUser")

    # Suppression d'un utilisateur (par un administrateur)
    deleteUser(id: ID!): DeleteResponse
        @guard(with: ["api"])
        @field(resolver: "App\\Modules\\User\\GraphQL\\Mutations\\UserMutator@deleteUser")

    # Mise à jour des informations personnelles (par l'utilisateur lui-même)
    updateProfile(
        id: ID!,
        name: String,
        email: String,
        avatar: String
    ): User
        @guard(with: ["api"])
        @field(resolver: "App\\Modules\\User\\GraphQL\\Mutations\\UserMutator@updateProfile")

    # Changement de mot de passe (par l'utilisateur lui-même)
    changePassword(
        current_password: String!,
        new_password: String!
    ): ChangePasswordResponse
        @guard(with: ["api"])
        @field(resolver: "App\\Modules\\User\\GraphQL\\Mutations\\UserMutator@changePassword")
}

input UserFilterInput {
    is_active: Boolean
    is_admin: Boolean
}
