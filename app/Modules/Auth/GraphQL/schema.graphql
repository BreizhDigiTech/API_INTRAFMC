# Schéma GraphQL pour l'authentification

type AuthPayload {
  access_token: String! # Jeton JWT
  token_type: String!   # Type de token (Bearer)
  expires_in: Int       # Durée de validité en secondes
  user: User!           # Utilisateur connecté
}

type LogoutResponse {
  message: String!      # Message de confirmation
}

type User {
  id: ID!               # Identifiant utilisateur
  name: String!         # Nom
  email: String!        # Email
  avatar: String        # URL de l'avatar
  is_admin: Boolean     # Vrai si admin
  is_active: Boolean    # Vrai si compte actif
  email_verified_at: String # Date de vérification de l'email
}

extend type Mutation {
  # Connexion utilisateur
  login(email: String!, password: String!): AuthPayload
    @field(resolver: "App\\Modules\\Auth\\GraphQL\\Mutations\\AuthMutator@login")

  # Déconnexion utilisateur
  logout: LogoutResponse
    @guard
    @field(resolver: "App\\Modules\\Auth\\GraphQL\\Mutations\\AuthMutator@logout")
}

extend type Query {
  # Retourne l'utilisateur connecté
  me: User
    @guard
    @field(resolver: "App\\Modules\\Auth\\GraphQL\\Queries\\AuthQuery@me")
}