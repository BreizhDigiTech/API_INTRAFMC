type Order {
  id: ID!
  user: User!
  total: Float!
  status: String!
  products: [OrderProduct!]!
  created_at: DateTime
  updated_at: DateTime
}

type OrderProduct {
  id: ID!
  name: String!
  price: Float!
  pivot: OrderProductPivot
}

type OrderProductPivot {
  quantity: Int!
  unit_price: Float!
}

extend type Mutation {
  checkout: Order
    @guard
    @field(resolver: "App\\Modules\\Order\\GraphQL\\Mutations\\OrderMutator@checkout")

  cancelOrder(id: ID!): Boolean
    @guard
    @field(resolver: "App\\Modules\\Order\\GraphQL\\Mutations\\OrderMutator@cancelOrder")
}

extend type Query {
  orders(first: Int, page: Int): [Order!]!
    @guard
    @paginate(defaultCount: 10, maxCount: 50, model: "App\\Models\\Order")

  order(id: ID!): Order
    @guard
    @field(resolver: "App\\Modules\\Order\\GraphQL\\Queries\\OrderQuery@order")
}