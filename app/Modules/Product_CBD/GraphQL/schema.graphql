extend type Query {
  products(first: Int, page: Int): [ProductCBD!]!
    @paginate(defaultCount: 20, maxCount: 100, model: "App\\Models\\ProductCBD")
  
  product(id: ID!): ProductCBD 
    @field(resolver: "App\\Modules\\Product_CBD\\GraphQL\\Queries\\ProductCBDQuery@product")
}

extend type Mutation {
  createProduct(input: CreateProductInput!): ProductCBD 
  @guard(with: ["api"]) 
  @field(resolver: "App\\Modules\\Product_CBD\\GraphQL\\Mutations\\ProductCBDMutator@createProduct")

  updateProduct(id: ID!, input: UpdateProductInput!): ProductCBD 
  @guard(with: ["api"])
  @field(resolver: "App\\Modules\\Product_CBD\\GraphQL\\Mutations\\ProductCBDMutator@updateProduct")

  deleteProduct(id: ID!): DeleteResponse
    @guard(with: ["api"])
    @field(resolver: "App\\Modules\\Product_CBD\\GraphQL\\Mutations\\ProductCBDMutator@deleteProduct")
}

type ProductCBD {
  id: ID!
  name: String!
  description: String
  price: Float!
  images: [String]
  stock: Int!
  analysis_file: String # Fichier d'analyse (optionnel)
  analysis_file_url: String # URL du fichier d'analyse
  category_id: Int
  created_at: String
  updated_at: String
}

input CreateProductInput {
  name: String!
  description: String
  price: Float!
  images: [String]
  stock: Int!
  analysis_file: String
  category_id: Int
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  images: [String]
  stock: Int
  analysis_file: String
  category_id: Int
}